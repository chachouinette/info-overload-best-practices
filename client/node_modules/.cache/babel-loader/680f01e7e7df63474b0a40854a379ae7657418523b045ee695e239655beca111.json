{"ast":null,"code":"var _jsxFileName = \"/Users/charlottegaia/Infobesite/info-overload-best-practices/client/src/components/BestPracticeList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport BestPracticeCard from './BestPracticeCard';\nimport { bestPractices } from '../data/bestPractices';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction BestPracticeList() {\n  _s();\n  const [filter, setFilter] = useState('');\n  const types = Array.from(new Set(bestPractices.map(p => p.type)));\n  const filteredPractices = filter ? bestPractices.filter(p => p.type === filter) : bestPractices;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '16px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"type-filter\",\n        children: \"Filtrer par type : \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"type-filter\",\n        value: filter,\n        onChange: e => setFilter(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Tous\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 11\n        }, this), types.map(type => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: type,\n          children: type\n        }, type, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        overflowX: 'auto',\n        padding: '16px'\n      },\n      children: filteredPractices.map((practice, idx) => /*#__PURE__*/_jsxDEV(BestPracticeCard, {\n        ...practice\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n}\n_s(BestPracticeList, \"cllJ8tv7lWu5CRRMgsiTyzyV2No=\");\n_c = BestPracticeList;\nexport default BestPracticeList;\nvar _c;\n$RefreshReg$(_c, \"BestPracticeList\");","map":{"version":3,"names":["React","useState","BestPracticeCard","bestPractices","jsxDEV","_jsxDEV","BestPracticeList","_s","filter","setFilter","types","Array","from","Set","map","p","type","filteredPractices","children","style","marginBottom","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","id","value","onChange","e","target","display","overflowX","padding","practice","idx","_c","$RefreshReg$"],"sources":["/Users/charlottegaia/Infobesite/info-overload-best-practices/client/src/components/BestPracticeList.jsx"],"sourcesContent":["\nimport React, { useState } from 'react';\nimport BestPracticeCard from './BestPracticeCard';\nimport { bestPractices } from '../data/bestPractices';\n\nfunction BestPracticeList() {\n  const [filter, setFilter] = useState('');\n  const types = Array.from(new Set(bestPractices.map(p => p.type)));\n\n  const filteredPractices = filter\n    ? bestPractices.filter(p => p.type === filter)\n    : bestPractices;\n\n  return (\n    <div>\n      <div style={{marginBottom: '16px'}}>\n        <label htmlFor=\"type-filter\">Filtrer par type : </label>\n        <select id=\"type-filter\" value={filter} onChange={e => setFilter(e.target.value)}>\n          <option value=\"\">Tous</option>\n          {types.map(type => (\n            <option key={type} value={type}>{type}</option>\n          ))}\n        </select>\n      </div>\n      <div style={{display: 'flex', overflowX: 'auto', padding: '16px'}}>\n        {filteredPractices.map((practice, idx) => (\n          <BestPracticeCard key={idx} {...practice} />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default BestPracticeList;\n"],"mappings":";;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,gBAAgB,MAAM,oBAAoB;AACjD,SAASC,aAAa,QAAQ,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtD,SAASC,gBAAgBA,CAAA,EAAG;EAAAC,EAAA;EAC1B,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAMS,KAAK,GAAGC,KAAK,CAACC,IAAI,CAAC,IAAIC,GAAG,CAACV,aAAa,CAACW,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC;EAEjE,MAAMC,iBAAiB,GAAGT,MAAM,GAC5BL,aAAa,CAACK,MAAM,CAACO,CAAC,IAAIA,CAAC,CAACC,IAAI,KAAKR,MAAM,CAAC,GAC5CL,aAAa;EAEjB,oBACEE,OAAA;IAAAa,QAAA,gBACEb,OAAA;MAAKc,KAAK,EAAE;QAACC,YAAY,EAAE;MAAM,CAAE;MAAAF,QAAA,gBACjCb,OAAA;QAAOgB,OAAO,EAAC,aAAa;QAAAH,QAAA,EAAC;MAAmB;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eACxDpB,OAAA;QAAQqB,EAAE,EAAC,aAAa;QAACC,KAAK,EAAEnB,MAAO;QAACoB,QAAQ,EAAEC,CAAC,IAAIpB,SAAS,CAACoB,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;QAAAT,QAAA,gBAC/Eb,OAAA;UAAQsB,KAAK,EAAC,EAAE;UAAAT,QAAA,EAAC;QAAI;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,EAC7Bf,KAAK,CAACI,GAAG,CAACE,IAAI,iBACbX,OAAA;UAAmBsB,KAAK,EAAEX,IAAK;UAAAE,QAAA,EAAEF;QAAI,GAAxBA,IAAI;UAAAM,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAA6B,CAC/C,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,eACNpB,OAAA;MAAKc,KAAK,EAAE;QAACY,OAAO,EAAE,MAAM;QAAEC,SAAS,EAAE,MAAM;QAAEC,OAAO,EAAE;MAAM,CAAE;MAAAf,QAAA,EAC/DD,iBAAiB,CAACH,GAAG,CAAC,CAACoB,QAAQ,EAAEC,GAAG,kBACnC9B,OAAA,CAACH,gBAAgB;QAAA,GAAegC;MAAQ,GAAjBC,GAAG;QAAAb,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAiB,CAC5C;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAAClB,EAAA,CA1BQD,gBAAgB;AAAA8B,EAAA,GAAhB9B,gBAAgB;AA4BzB,eAAeA,gBAAgB;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}